<#@ template language="C#" hostspecific="True"#>
<#@ assembly name="$(SolutionDir)CodeGenInput\bin\Debug\CodeGenInput.dll" #>
<#@ output extension=".txt" #>
<#@ import namespace="CodeGenInput" #>
<#@ import namespace="CodeGenInput.Attributes" #>
<#@include file="MultipleOutputHelper.ttinclude"#>
<#@include file="T4Helper.ttinclude" #>
<#
var namespaceName = "CodeGen";
var manager = Manager.Create(Host, GenerationEnvironment);
manager.StartHeader();
#>
// Code generated by a template - do not edit by hand!
using System;
using System.Collections.Immutable;
using CodeGenInput;

namespace <#=namespaceName#>
{
<#
manager.EndBlock();
manager.StartFooter();
#>
}
<# manager.EndBlock(); #>

<#
var includeInGenType = typeof(IncludeInGeneration);
var allToGenerate = T4Helper.FindAllClassesToInclude(includeInGenType);

foreach(var toGen in allToGenerate)
{
  var currentType = toGen;
  var className = T4Helper.GetClassName(toGen.Name);

  manager.StartNewFile(className + ".cs");
  #>
  <#@include file="ImmutableGenerator.ttinclude" #>
  <#
  manager.EndBlock();
}
#>
<# manager.Process(true); #>
Result of the way VS does template compiling...